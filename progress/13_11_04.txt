I have done:
	-research new Android Kitkat 4.4 / Nexus 5
		-Kitkat:
			-soon available for Nexus 7 - "coming weeks"
			-source code available on Android Open Source Project
			-focused on consistent experience across the entire user base
				"One OS to Rule them ALL"
				-fighting fragmentation
				-so reducing OS resources
					-but mainly memory ("All about memory optimization")
		-Nexus 5
				-novelty way of using  LTE -> signal amplifier changes -> energy saving

	-research Mozilla Location Service
		-so far: publicly available data, but still need to query them over the Internet
		-planning: put data on mobile phone
			-working on how to obscure them
				-in Google Location Service, you need to include 2-3 access which are next to this access point, so it "proves" that the request is near the access points
				-^^ mozilla wants to do the same and keep data on mobile phone -> cryptography
					-unlike Google Location Service, they don't store MAC or SSID, but SHA1(MAC+SSID) only - they claim that at least.
				-https://groups.google.com/forum/#!topic/mozilla.dev.security/0qT0grS_PIY

	-experiments:
		-environment:
			-reset to factory setting and switch off Google location services
			-apps are printing to LogCat, but don't update screen
			-mobile phone 100%, switch off everything else
			-screen on for first half an hour
		-question: how much % is left
		-(first run for half an hour GPS indoor: 98% left)
		-run for 4 hours each
			-90% left for GPS indoor
			-98% left for network-based
			-99% accelerometer
			

Some random ideas:
localization based on altitude changes detected by accelerometer and gyroscope?

Meeting:
	1. new Kitkat provides "batching of sensor request". Research it
	2. Don't get so sidetracked
	3. Cloud computing and location service & comparison with 10 years ago for Nokia phones
	4. Mozilla Location Service obscuring the data -> differential privacy (http://www.kiskeya.net/ramon/work/pubs/bigdata13.pdf)
			-by Microsoft and AT&T
			-bootstrap may be a problem
	5. Battery measurement:
			-conclusion:
				-TrepnProfiler is not correct in case of accelerometer
				-so far, need to rely on battery life instead 
				-only information on percentage of battery life left is available
					-but it is not accurate enough to show difference between some physical sensors(e.g. accelerometer and gyroscope)?
						-would be good to see numbers or per mil
							-investigate other ways to extract energy information from device
							-API for battery, what it gives back?
				-"stay awake" issue in Android phones
					-the phone may only stay awake for half an hour
					-let's app makes the phone stake awake after half an hour
					-all done to deplete the battery faster
			-mail TrepnProfiler 
